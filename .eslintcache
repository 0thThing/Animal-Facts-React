[{"C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\index.js":"1","C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\App.js":"2","C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\reportWebVitals.js":"3","C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\Header.js":"4","C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\FactGenerator.js":"5","C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\Facts.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":480,"mtime":1613035600712,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":208,"mtime":1612778193526,"results":"11","hashOfConfig":"8"},{"size":7676,"mtime":1613258405559,"results":"12","hashOfConfig":"8"},{"size":812,"mtime":1613258604658,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"15lfmau",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\index.js",[],["30","31"],"C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\App.js",["32"],"import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport FactGenerator from \"./FactGenerator\";\nimport Header from './Header.js'\nimport 'bootstrap/dist/css/bootstrap.min.css'; //GOING TO TRY TO WORK WITH THIS BUT IT CAUSES THIS HORIZONTAL SCROLL BAR\n//going to mess with calling parent\nfunction App(){\n\n        return (\n            <div >\n                <Header />\n                <FactGenerator/>\n            </div>\n\n        )\n\n}\n\n\nexport default App;\n","C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\reportWebVitals.js",[],"C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\Header.js",[],"C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\FactGenerator.js",["33"],"import React from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Facts from './Facts'\r\n\r\n\r\n//note: this backend API that the facts come from do not distribute the facts evenly\r\n// so even though you request dog facts you might not get any if you request another type of animal fact as well\r\n//just noticed I could fix this problem but changing the way get facts works and just distribute the facts evenly\r\nclass FactGenerator extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            allFacts: [\r\n                {animal: 'cat', facts: []},\r\n                {animal: 'dog', facts: []},\r\n                {animal: 'snail',facts: []},\r\n                {animal: 'horse',facts: []},\r\n\r\n            ],\r\n            filteredFacts: [\r\n                {animal: 'cat', facts: []},\r\n                {animal: 'dog', facts: []},\r\n                {animal: 'snail',facts: []},\r\n                {animal: 'horse',facts: []},\r\n\r\n            ],\r\n            numberOfFacts: 2,\r\n            factTypes: [\r\n                {animal: 'cat', getFact: false, id: 1},\r\n                {animal: 'dog', getFact: false, id: 2},\r\n                {animal: 'snail', getFact: false, id:3},\r\n                {animal: 'horse', getFact: false, id:4},\r\n            ],\r\n\r\n\r\n\r\n        }\r\n\r\n        this.getFacts = this.getFacts.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleFilter = this.handleFilter.bind(this)\r\n    }\r\n\r\n    getFacts() {\r\n\r\n        let animalTypes = ''\r\n        for (let i=0;i< this.state.factTypes.length;i++)//loop to construct the proper string so the api returns only the animal facts requested\r\n        {\r\n            let fact = this.state.factTypes[i]\r\n\r\n            if (fact.getFact)\r\n            {\r\n                console.log(fact.animal)\r\n                animalTypes += fact.animal+','\r\n            }\r\n            console.log(animalTypes)\r\n        }\r\n\r\n\r\n        fetch('https://cat-fact.herokuapp.com/facts/random?animal_type='+animalTypes+'&amount='+this.state.numberOfFacts)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res)\r\n                let dogFactList = [];\r\n                let catFactList = [];\r\n                let snailFactList = [];\r\n                let horseFactList = [];\r\n                let allFacts = [];\r\n\r\n\r\n\r\n                for (let i = 0; i < res.length; i++) {\r\n\r\n                    let {text,id,type} = res[i]\r\n                    if(res[i].type === 'cat'){\r\n                        catFactList.push({text,id,type})\r\n                        allFacts.push({text,id,type})\r\n                    }\r\n                    else if(res[i].type === 'dog'){\r\n                        dogFactList.push({text,id,type})\r\n                        allFacts.push({text,id,type})\r\n                    }\r\n                    else if(res[i].type === 'snail'){\r\n                        snailFactList.push({text,id,type})\r\n                        allFacts.push({text,id,type})\r\n                    }\r\n                    else if(res[i].type === 'horse'){\r\n                        horseFactList.push({text,id,type})\r\n                        allFacts.push({text,id,type})\r\n                    }\r\n\r\n                }\r\n\r\n                this.setState({ //set them both since we only display filtered facts below\r\n                    allFacts: [\r\n                        {animal: 'cat', facts: catFactList},\r\n                        {animal: 'dog', facts: dogFactList},\r\n                        {animal: 'snail',facts: snailFactList},\r\n                        {animal: 'horse',facts: horseFactList},\r\n\r\n                    ],\r\n                    filteredFacts: [\r\n                        {animal: 'cat', facts: catFactList},\r\n                        {animal: 'dog', facts: dogFactList},\r\n                        {animal: 'snail',facts: snailFactList},\r\n                        {animal: 'horse',facts: horseFactList},\r\n                    ]\r\n                })\r\n\r\n            })\r\n\r\n    }\r\n\r\n    handleChange(event, checkbox) {\r\n        console.log(event)\r\n        console.log(checkbox)\r\n        if (event.target.type === 'checkbox') {\r\n\r\n            let factTypeList = this.state.factTypes.map(factType => {\r\n                console.log(factType.id)\r\n                console.log(event.target.name)\r\n                if (factType.id == event.target.name) {//this needs == and not === for type conversion\r\n                    factType.getFact = !factType.getFact\r\n                }\r\n                return factType\r\n            })\r\n            this.setState({\r\n                factTypes: factTypeList\r\n            })\r\n\r\n    }\r\n        else {\r\n            this.setState({\r\n                [event.target.name]: event.target.value\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    handleFilter(event) {\r\n        console.log(event.target.value)\r\n        if(event.target.value === '')\r\n        {\r\n            this.setState({\r\n                filteredFacts: this.state.allFacts\r\n\r\n            })\r\n        }\r\n\r\n        let allFilteredFacts = []\r\n\r\n        for (let i=0;i<this.state.allFacts.length;i++){\r\n            //going to loop through and try to filter each animal fact type seperate\r\n            //one thing I dont like here is the order could get messed up if you change the state variables\r\n\r\n            let list = this.state.allFacts[i].facts\r\n            console.log('this is the list ',list)\r\n            let filteredFacts = list.filter((fact) => {\r\n                    return fact.text.toLowerCase().includes(event.target.value.toLowerCase())\r\n                }\r\n            )\r\n\r\n            allFilteredFacts.push(filteredFacts)\r\n            console.log(allFilteredFacts)\r\n        }\r\n\r\n        this.setState({\r\n            filteredFacts: [\r\n\r\n                {animal: 'cat', facts: allFilteredFacts[0]},\r\n                {animal: 'dog', facts: allFilteredFacts[1]},\r\n                {animal: 'snail',facts: allFilteredFacts[2]},\r\n                {animal: 'horse',facts: allFilteredFacts[3]},\r\n            ]\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='container-fluid'>\r\n                <div className='buttons'>\r\n                    <input type='text' className='search-bar' placeholder='Search...'\r\n                           onChange={this.handleFilter}></input> <p></p>\r\n\r\n                    <input type='number' placeholder='1' name='numberOfFacts' value={this.state.numberOfFacts} min={1}\r\n                           max={500} onChange={this.handleChange}></input>\r\n                    <label>cat</label>\r\n                    <input type='checkbox' name='1' checked={this.state.factTypes[0].getFact}\r\n                           onChange={(e) => this.handleChange(e, this)}></input>\r\n                    <label>dog</label>\r\n                    <input type='checkbox' name='2' checked={this.state.factTypes[1].getFact}\r\n                           onChange={(e) => this.handleChange(e, this)}></input>\r\n                    <label>snail</label>\r\n                    <input type='checkbox' name='3' checked={this.state.factTypes[2].getFact}\r\n                           onChange={(e) => this.handleChange(e, this)}></input>\r\n                    <label>horse</label>\r\n                    <input type='checkbox' name='4' checked={this.state.factTypes[3].getFact}\r\n                           onChange={(e) => this.handleChange(e, this)}></input> <p></p>\r\n                    <Button onClick={this.getFacts}>Get Facts!</Button>\r\n\r\n                </div>\r\n\r\n                <Facts facts={this.state.filteredFacts}/>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default FactGenerator;\r\n\r\n","C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\Facts.js",["34"],"import React from 'react'\r\n\r\nfunction Facts(props) {\r\n    let backgroundDivs\r\n\r\n    backgroundDivs = props.facts.map((obj) => {\r\n        console.log('is this if working the way it should?',obj.facts !== [],'the facts', obj.facts)\r\n        if(obj.facts.length !== 0){\r\n\r\n\r\n\r\n            console.log('here is the object that should have fact and animal', obj)\r\n\r\n            let divContent = obj.facts.map(fact => <p>{fact.text}</p>)//using index only works because the types of facts are in the same order\r\n            console.log('the div content is', divContent)\r\n            return <div className={obj.animal} ><div className='inner-box'>{divContent}</div></div>\r\n\r\n        }\r\n\r\n    })\r\n    return(\r\n\r\n\r\n        <div className='bg'>\r\n            {backgroundDivs}\r\n        </div>\r\n    )\r\n}\r\nexport default Facts",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":12},{"ruleId":"43","severity":1,"message":"44","line":122,"column":33,"nodeType":"45","messageId":"46","endLine":122,"endColumn":35},{"ruleId":"47","severity":1,"message":"48","line":6,"column":44,"nodeType":"49","messageId":"50","endLine":6,"endColumn":46},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]