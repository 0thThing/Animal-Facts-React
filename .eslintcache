[{"C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\index.js":"1","C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\App.js":"2","C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\reportWebVitals.js":"3","C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\Header.js":"4","C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\FactGenerator.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":359,"mtime":1611034653812,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":196,"mtime":1611034727703,"results":"10","hashOfConfig":"7"},{"size":4303,"mtime":1611120084595,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"tfav7x",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\index.js",[],["25","26"],"C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\App.js",["27"],"import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport FactGenerator from \"./FactGenerator\";\nimport Header from './Header.js'\n//going to mess with calling parent\nfunction App(){\n\n        return (\n            <div >\n                <Header />\n                <FactGenerator/>\n            </div>\n\n        )\n\n}\n\n\nexport default App;\n","C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\reportWebVitals.js",[],"C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\Header.js",[],"C:\\Users\\Jordan\\WebstormProjects\\filter_practice\\src\\FactGenerator.js",["28"],"import React from 'react'\r\n\r\n\r\nclass FactGenerator extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            facts: [],\r\n            filteredFacts: [],\r\n            numberOfFacts: 2,\r\n            factTypes: [\r\n                {animal: 'cat', getFact: false, id: 1},\r\n                {animal: 'dog', getFact: false, id: 2},\r\n                {animal: 'snail', getFact: false, id:3},\r\n                {animal: 'horse', getFact: false, id:4},\r\n            ],\r\n\r\n\r\n\r\n        }\r\n\r\n        this.getFacts = this.getFacts.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleFilter = this.handleFilter.bind(this)\r\n    }\r\n\r\n    getFacts() {\r\n\r\n        let animalTypes = ''\r\n        for (let i=0;i< this.state.factTypes.length;i++)\r\n        {\r\n            let fact = this.state.factTypes[i]\r\n            console.log(this.state.factTypes[i].getFact)\r\n            if (fact.getFact)\r\n            {\r\n                console.log(fact.animal)\r\n                animalTypes += fact.animal+','\r\n            }\r\n            console.log(animalTypes)\r\n        }\r\n\r\n\r\n        fetch('https://cat-fact.herokuapp.com/facts/random?animal_type='+animalTypes+'&amount='+this.state.numberOfFacts)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res)\r\n                let fact_list = [];\r\n                for (let i = 0; i < res.length; i++) {\r\n                    let {text,id} = res[i]\r\n                    fact_list.push({text, id})\r\n                }\r\n\r\n                this.setState({ //set them both since we only display filtered facts below\r\n                    facts: fact_list,\r\n                    filteredFacts: fact_list,\r\n                })\r\n\r\n            })\r\n\r\n    }\r\n\r\n    handleChange(event, checkbox) {\r\n        console.log(event)\r\n        console.log(checkbox)\r\n        if (event.target.type === 'checkbox') {\r\n\r\n            let factTypeList = this.state.factTypes.map(factType => {\r\n                console.log(factType.id)\r\n                console.log(event.target.name)\r\n                if (factType.id == event.target.name) {\r\n\r\n                    factType.getFact = !factType.getFact\r\n                }\r\n                return factType\r\n            })\r\n            this.setState({\r\n                factTypes: factTypeList\r\n            })\r\n\r\n    }\r\n        else {\r\n            this.setState({\r\n                [event.target.name]: event.target.value\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    handleFilter(event) {\r\n        let filteredFacts = this.state.facts.filter((fact) => {\r\n                return fact.text.toLowerCase().includes(event.target.value.toLowerCase())\r\n            }\r\n        )\r\n\r\n        this.setState({\r\n            filteredFacts: filteredFacts\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        let facts = this.state.filteredFacts.map(fact => <p key={fact.text}>{fact.text}</p>)  // Note we are using filteredFacts from state here DO NOT THINK WE NEED TO PASS THIS INTO HANDLECHANGE ANYMORE\r\n        return (\r\n            <div className='fact-generator'>\r\n                <input type='text' className='search-bar' placeholder='Search...' onChange={this.handleFilter}></input> <p></p>\r\n\r\n                <input type='number' placeholder='1' name='numberOfFacts' value={this.state.numberOfFacts} min={1} max={500} onChange={this.handleChange}></input>\r\n                <label>cat</label>\r\n                <input  type='checkbox' name='1' checked={this.state.factTypes[0].getFact} onChange={(e) => this.handleChange(e,this)}></input>\r\n                <label>dog</label>\r\n                <input  type='checkbox' name='2' checked={this.state.factTypes[1].getFact} onChange={(e) =>this.handleChange(e,this)}></input>\r\n                <label>snail</label>\r\n                <input  type='checkbox' name='3' checked={this.state.factTypes[2].getFact} onChange={(e) => this.handleChange(e,this)}></input>\r\n                <label>horse</label>\r\n                <input  type='checkbox' name='4' checked={this.state.factTypes[3].getFact} onChange={(e) =>this.handleChange(e,this)}></input> <p></p>\r\n                <button onClick={this.getFacts}>Get Facts!</button>\r\n\r\n                {facts}\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default FactGenerator;\r\n\r\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":12},{"ruleId":"37","severity":1,"message":"38","line":70,"column":33,"nodeType":"39","messageId":"40","endLine":70,"endColumn":35},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]